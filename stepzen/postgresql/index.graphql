type comments {
  username: String
  text: String
  post_id: ID
  # post: post @materializer(query: "getPostUsingComments_post_id_fkey")
  id: ID!
  created_at: DateTime
}

type post {
  username: String
  tittle: String
  subreddit_id: ID
  image: String
  id: ID!
  created_at: DateTime
  body: String
  comments: [comments] @materializer(
    query: "getCommentsByPostId",
    arguments: [{ name: "post_id", field: "id" }]
  )
  votes: [vote]
    @materializer(
      query: "getVotesByPostId",
      arguments: [{ name: "post_id", field: "id" }]
    )
  subreddit: [subreddit]
    @materializer(
      query: "getSubredditListById",
      arguments: [{ name: "id", field: "subreddit_id" }]
    )
}

type subreddit {
  topic: String
  # post: [post] @materializer(query: "getPostUsingPost_subreddit_id_fkey")
  id: ID!
  created_at: DateTime
}

type vote {
  username: String
  upvote: Boolean
  post_id: ID
  # post: post @materializer(query: "getPost")
  id: ID!
  created_at: DateTime
}

"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
  " Queries for type 'comments' "
  comments(id: ID!): comments
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comments"
      configuration: "postgresql_config"
    )
  commentsList: [comments]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comments"
      configuration: "postgresql_config"
    )
  commentsPaginatedList(first: Int, after: Int): [comments]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "text", "username" FROM "comments" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  getComments(id: ID!): [comments]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "text", "username" FROM "comments" WHERE "post_id" = $1
      """
      configuration: "postgresql_config"
    )
    getCommentsByPostId(post_id: ID!): [comments]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT * from "comments" WHERE "post_id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'post' "
  getPost(post_id: ID!): post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "image", "subreddit_id", "tittle", "username" FROM "post" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  getPostUsingComments_post_id_fkey(post_id: ID!): post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "image", "subreddit_id", "tittle", "username" FROM "post" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  getPostUsingPost_subreddit_id_fkey(id: ID!): [post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "image", "subreddit_id", "tittle", "username" FROM "post" WHERE "subreddit_id" = $1
      """
      configuration: "postgresql_config"
    )
  post(id: ID!): post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  postList: [post]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT * FROM "post" 
      ORDER BY "post"."created_at" desc
      """
      configuration: "postgresql_config"
    )
  postListByTopic(topic: String!): [post]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT *, "post".id as id FROM "post"
      INNER JOIN "subreddit" ON "post".subreddit_id = "subreddit".id
      WHERE "subreddit".topic = $1   
      ORDER BY "post"."created_at" desc
      """
      configuration: "postgresql_config"
    )
  postListById(post_id: ID!): [post]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT * FROM "post"
      WHERE "post"."id" = $1   
      """
      configuration: "postgresql_config"
    )

  postPaginatedList(first: Int, after: Int): [post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "image", "subreddit_id", "tittle", "username" FROM "post" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'subreddit' "
  getSubreddit(subreddit_id: ID!): subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "topic" FROM "subreddit" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  getSubredditListById(id: ID!): [subreddit]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT * from "subreddit" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  subreddit(id: ID!): subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      configuration: "postgresql_config"
    )
  subredditList: [subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      configuration: "postgresql_config"
    )
  subredditListByTopic(topic: String!): [subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      select * from "subreddit" where "topic" = $1
      """
      configuration: "postgresql_config"
    )
  subredditPaginatedList(first: Int, after: Int): [subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "topic" FROM "subreddit" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'vote' "
  getVote(id: ID!): [vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "upvote", "username" FROM "vote" WHERE "post_id" = $1
      """
      configuration: "postgresql_config"
    )
  getVotesByPostId(post_id: ID!): [vote]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT * FROM "vote" WHERE "post_id" = $1
      order by "created_at" desc
      """
      configuration: "postgresql_config"
    )
  vote(id: ID!): vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
  voteList: [vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
  votePaginatedList(first: Int, after: Int): [vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "upvote", "username" FROM "vote" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
  " Mutations for type 'comments' "
  deleteComments(id: ID!): comments
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comments"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertComments(
    username: String
    post_id: ID
    text: String
    created_at: DateTime
  ): comments
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comments"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateComments(
    id: ID!
    created_at: DateTime
    post_id: ID
    text: String
    username: String
  ): comments
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "comments" SET
        "created_at" = COALESCE($2, "created_at"),
        "post_id" = COALESCE($3, "post_id"),
        "text" = COALESCE($4, "text"),
        "username" = COALESCE($5, "username")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'post' "
  deletePost(id: ID!): post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertPost(
    body: String
    tittle: String
    subreddit_id: ID
    username: String
    image: String
  ): post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updatePost(
    id: ID!
    body: String
    created_at: DateTime
    image: String
    subreddit_id: ID
    tittle: String
    username: String
  ): post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "post" SET
        "body" = COALESCE($2, "body"),
        "created_at" = COALESCE($3, "created_at"),
        "image" = COALESCE($4, "image"),
        "subreddit_id" = COALESCE($5, "subreddit_id"),
        "tittle" = COALESCE($6, "tittle"),
        "username" = COALESCE($7, "username")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'subreddit' "
  deleteSubreddit(id: ID!): subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertSubreddit(topic: String): subreddit
    @dbquery(
      type: "postgresql"
      # schema: "public"
      table: "subreddit"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateSubreddit(id: ID!, created_at: DateTime, topic: String): subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "subreddit" SET
        "created_at" = COALESCE($2, "created_at"),
        "topic" = COALESCE($3, "topic")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'vote' "
  deleteVote(id: ID!): vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertVote(
    username: String
    post_id: ID
    created_at: DateTime
    upvote: Boolean
  ): vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateVote(
    id: ID!
    created_at: DateTime
    post_id: ID
    upvote: Boolean
    username: String
  ): vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "vote" SET
        "created_at" = COALESCE($2, "created_at"),
        "post_id" = COALESCE($3, "post_id"),
        "upvote" = COALESCE($4, "upvote"),
        "username" = COALESCE($5, "username")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
}
